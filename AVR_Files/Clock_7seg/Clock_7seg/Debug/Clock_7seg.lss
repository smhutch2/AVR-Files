
Clock_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004fe  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000610  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001df  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043c  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00001952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  9e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <num0>:
	d3 = parse1(time[1]);
	d4 = parse2(time[1]);
}
void num0(void)
{
	PORTB = 0b00000100;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b01000000;
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	8b b9       	out	0x0b, r24	; 11
  ae:	08 95       	ret

000000b0 <num1>:
}
void num1(void)
{
	PORTB = 0b00101101;
  b0:	8d e2       	ldi	r24, 0x2D	; 45
  b2:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	08 95       	ret

000000ba <num2>:
}
void num2(void)
{
	PORTB = 0b00110000;
  ba:	80 e3       	ldi	r24, 0x30	; 48
  bc:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b01000000;
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	08 95       	ret

000000c4 <num3>:
}
void num3(void)
{
	PORTB = 0b00100000;
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret

000000ce <num4>:
}
void num4(void)
{
	PORTB = 0b00001001;
  ce:	89 e0       	ldi	r24, 0x09	; 9
  d0:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
  d2:	80 ec       	ldi	r24, 0xC0	; 192
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	08 95       	ret

000000d8 <num5>:
}
void num5(void)
{
	PORTB = 0b00000010;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
  dc:	80 ec       	ldi	r24, 0xC0	; 192
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	08 95       	ret

000000e2 <num6>:
}
void num6(void)
{
	PORTB = 0b00000010;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b01000000;
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret

000000ec <num7>:
}
void num7(void)
{
	PORTB = 0b00100101;
  ec:	85 e2       	ldi	r24, 0x25	; 37
  ee:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
  f0:	80 ec       	ldi	r24, 0xC0	; 192
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	08 95       	ret

000000f6 <num8>:
}
void num8(void)
{
	PORTB = 0b00000000;
  f6:	15 b8       	out	0x05, r1	; 5
	PORTD = 0b01000000;
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	08 95       	ret

000000fe <num9>:
}
void num9(void)
{
	PORTB = 0b00000001;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	8b b9       	out	0x0b, r24	; 11
 106:	08 95       	ret

00000108 <colon>:
}

void colon(void)
{
	PORTB = 0b00110101;
 108:	85 e3       	ldi	r24, 0x35	; 53
 10a:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b11000000;
 10c:	80 ec       	ldi	r24, 0xC0	; 192
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	08 95       	ret

00000112 <display_rst>:
}
void display_rst(void)
{
	PORTB = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	85 b9       	out	0x05, r24	; 5
	PORTD = 0xFF;
 116:	8b b9       	out	0x0b, r24	; 11
 118:	08 95       	ret

0000011a <parse1>:
}

int parse1(int pval) //turn the values to being usable by display
{
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
	int d1;
	//int d2;

	for (int i = 0; i <= 60; i = i + 10)
 12c:	e0 e0       	ldi	r30, 0x00	; 0
 12e:	f0 e0       	ldi	r31, 0x00	; 0
		for (int f = 0; f <= 9; f = f + 1)
		{
			int g = i + f;
			if (pval == g)
			{
				d1 = i / 10;
 130:	0a e0       	ldi	r16, 0x0A	; 10
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
 138:	11 c0       	rjmp	.+34     	; 0x15c <parse1+0x42>
 13a:	a9 01       	movw	r20, r18
 13c:	4e 0f       	add	r20, r30
 13e:	5f 1f       	adc	r21, r31
	{
		
		for (int f = 0; f <= 9; f = f + 1)
		{
			int g = i + f;
			if (pval == g)
 140:	c4 17       	cp	r28, r20
 142:	d5 07       	cpc	r29, r21
 144:	11 f4       	brne	.+4      	; 0x14a <parse1+0x30>
			{
				d1 = i / 10;
 146:	c6 2e       	mov	r12, r22
 148:	d7 2e       	mov	r13, r23
	//int d2;

	for (int i = 0; i <= 60; i = i + 10)
	{
		
		for (int f = 0; f <= 9; f = f + 1)
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	2a 30       	cpi	r18, 0x0A	; 10
 150:	31 05       	cpc	r19, r1
 152:	99 f7       	brne	.-26     	; 0x13a <parse1+0x20>
int parse1(int pval) //turn the values to being usable by display
{
	int d1;
	//int d2;

	for (int i = 0; i <= 60; i = i + 10)
 154:	3a 96       	adiw	r30, 0x0a	; 10
 156:	e6 34       	cpi	r30, 0x46	; 70
 158:	f1 05       	cpc	r31, r1
 15a:	39 f0       	breq	.+14     	; 0x16a <parse1+0x50>
		for (int f = 0; f <= 9; f = f + 1)
		{
			int g = i + f;
			if (pval == g)
			{
				d1 = i / 10;
 15c:	cf 01       	movw	r24, r30
 15e:	b8 01       	movw	r22, r16
 160:	0e 94 55 02 	call	0x4aa	; 0x4aa <__divmodhi4>
 164:	2e 2d       	mov	r18, r14
 166:	3f 2d       	mov	r19, r15
 168:	e8 cf       	rjmp	.-48     	; 0x13a <parse1+0x20>
				//d2 = f;
			}
		}
	}
	return d1;
}
 16a:	8c 2d       	mov	r24, r12
 16c:	9d 2d       	mov	r25, r13
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	df 90       	pop	r13
 17c:	cf 90       	pop	r12
 17e:	08 95       	ret

00000180 <parse2>:
int parse2(int pval) //turn the values to being usable by display
{
	//int d1;
	int d2;

	for (int i = 0; i <= 60; i = i + 10)
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	return d1;
}
int parse2(int pval) //turn the values to being usable by display
{
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	12 c0       	rjmp	.+36     	; 0x1ae <parse2+0x2e>
 18a:	a9 01       	movw	r20, r18
 18c:	46 0f       	add	r20, r22
 18e:	57 1f       	adc	r21, r23
	{
		
		for (int f = 0; f <= 9; f = f + 1)
		{
			int g = i + f;
			if (pval == g)
 190:	84 17       	cp	r24, r20
 192:	95 07       	cpc	r25, r21
 194:	11 f4       	brne	.+4      	; 0x19a <parse2+0x1a>
 196:	b2 2f       	mov	r27, r18
 198:	a3 2f       	mov	r26, r19
	int d2;

	for (int i = 0; i <= 60; i = i + 10)
	{
		
		for (int f = 0; f <= 9; f = f + 1)
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	2a 30       	cpi	r18, 0x0A	; 10
 1a0:	31 05       	cpc	r19, r1
 1a2:	99 f7       	brne	.-26     	; 0x18a <parse2+0xa>
int parse2(int pval) //turn the values to being usable by display
{
	//int d1;
	int d2;

	for (int i = 0; i <= 60; i = i + 10)
 1a4:	66 5f       	subi	r22, 0xF6	; 246
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	66 34       	cpi	r22, 0x46	; 70
 1aa:	71 05       	cpc	r23, r1
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <parse2+0x34>
		}
	}
	return d1;
}
int parse2(int pval) //turn the values to being usable by display
{
 1ae:	2f 2f       	mov	r18, r31
 1b0:	3e 2f       	mov	r19, r30
 1b2:	eb cf       	rjmp	.-42     	; 0x18a <parse2+0xa>
				d2 = f;
			}
		}
	}
	return d2;
}
 1b4:	8b 2f       	mov	r24, r27
 1b6:	9a 2f       	mov	r25, r26
 1b8:	08 95       	ret

000001ba <set7>:
	PORTC = 0b00010000;
	numCall(d4);
	
}
void set7(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	d1 = parse1(time[0]);
 1be:	c0 91 00 01 	lds	r28, 0x0100
 1c2:	d0 91 01 01 	lds	r29, 0x0101
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 8d 00 	call	0x11a	; 0x11a <parse1>
 1cc:	90 93 07 01 	sts	0x0107, r25
 1d0:	80 93 06 01 	sts	0x0106, r24
	d2 = parse2(time[0]);
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 c0 00 	call	0x180	; 0x180 <parse2>
 1da:	90 93 09 01 	sts	0x0109, r25
 1de:	80 93 08 01 	sts	0x0108, r24
	d3 = parse1(time[1]);
 1e2:	c0 91 02 01 	lds	r28, 0x0102
 1e6:	d0 91 03 01 	lds	r29, 0x0103
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 8d 00 	call	0x11a	; 0x11a <parse1>
 1f0:	90 93 0f 01 	sts	0x010F, r25
 1f4:	80 93 0e 01 	sts	0x010E, r24
	d4 = parse2(time[1]);
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <parse2>
 1fe:	90 93 0d 01 	sts	0x010D, r25
 202:	80 93 0c 01 	sts	0x010C, r24
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <numCall>:
	}
	return d2;
}

void numCall(int num)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ec 01       	movw	r28, r24
	if (num == 0)
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	19 f4       	brne	.+6      	; 0x21c <numCall+0x10>
	{
		num0();
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <num0>
 21a:	0c c0       	rjmp	.+24     	; 0x234 <numCall+0x28>
	}
	if (num == 1)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	91 05       	cpc	r25, r1
 220:	19 f4       	brne	.+6      	; 0x228 <numCall+0x1c>
	{
		num1();
 222:	0e 94 58 00 	call	0xb0	; 0xb0 <num1>
 226:	0c c0       	rjmp	.+24     	; 0x240 <numCall+0x34>
	}
	if (num == 2)
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	91 05       	cpc	r25, r1
 22c:	19 f4       	brne	.+6      	; 0x234 <numCall+0x28>
	{
		num2();
 22e:	0e 94 5d 00 	call	0xba	; 0xba <num2>
 232:	0c c0       	rjmp	.+24     	; 0x24c <numCall+0x40>
	}
	if (num == 3)
 234:	c3 30       	cpi	r28, 0x03	; 3
 236:	d1 05       	cpc	r29, r1
 238:	19 f4       	brne	.+6      	; 0x240 <numCall+0x34>
	{
		num3();
 23a:	0e 94 62 00 	call	0xc4	; 0xc4 <num3>
 23e:	0c c0       	rjmp	.+24     	; 0x258 <numCall+0x4c>
	}
	if (num == 4)
 240:	c4 30       	cpi	r28, 0x04	; 4
 242:	d1 05       	cpc	r29, r1
 244:	19 f4       	brne	.+6      	; 0x24c <numCall+0x40>
	{
		num4();
 246:	0e 94 67 00 	call	0xce	; 0xce <num4>
 24a:	0c c0       	rjmp	.+24     	; 0x264 <numCall+0x58>
	}
	if (num == 5)
 24c:	c5 30       	cpi	r28, 0x05	; 5
 24e:	d1 05       	cpc	r29, r1
 250:	19 f4       	brne	.+6      	; 0x258 <numCall+0x4c>
	{
		num5();
 252:	0e 94 6c 00 	call	0xd8	; 0xd8 <num5>
 256:	0c c0       	rjmp	.+24     	; 0x270 <numCall+0x64>
	}
	if (num == 6)
 258:	c6 30       	cpi	r28, 0x06	; 6
 25a:	d1 05       	cpc	r29, r1
 25c:	19 f4       	brne	.+6      	; 0x264 <numCall+0x58>
	{
		num6();
 25e:	0e 94 71 00 	call	0xe2	; 0xe2 <num6>
 262:	0c c0       	rjmp	.+24     	; 0x27c <numCall+0x70>
	}
	if (num == 7)
 264:	c7 30       	cpi	r28, 0x07	; 7
 266:	d1 05       	cpc	r29, r1
 268:	19 f4       	brne	.+6      	; 0x270 <numCall+0x64>
	{
		num7();
 26a:	0e 94 76 00 	call	0xec	; 0xec <num7>
 26e:	0a c0       	rjmp	.+20     	; 0x284 <numCall+0x78>
	}
	if (num == 8)
 270:	c8 30       	cpi	r28, 0x08	; 8
 272:	d1 05       	cpc	r29, r1
 274:	19 f4       	brne	.+6      	; 0x27c <numCall+0x70>
	{
		num8();
 276:	0e 94 7b 00 	call	0xf6	; 0xf6 <num8>
 27a:	04 c0       	rjmp	.+8      	; 0x284 <numCall+0x78>
	}
	if (num == 9)
 27c:	29 97       	sbiw	r28, 0x09	; 9
 27e:	11 f4       	brne	.+4      	; 0x284 <numCall+0x78>
	{
		num9();
 280:	0e 94 7f 00 	call	0xfe	; 0xfe <num9>
	}

}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <display>:
int d3;
int d4;
//*-----7SEG FUNCTIONS------*
void display(void)
{
	display_rst();
 28a:	0e 94 89 00 	call	0x112	; 0x112 <display_rst>
	PORTC = 0b00000001;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	88 b9       	out	0x08, r24	; 8
	if (d1 != 0)
 292:	80 91 06 01 	lds	r24, 0x0106
 296:	90 91 07 01 	lds	r25, 0x0107
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	11 f0       	breq	.+4      	; 0x2a2 <display+0x18>
	{
		numCall(d1);
 29e:	0e 94 06 01 	call	0x20c	; 0x20c <numCall>
	}
	display_rst();
 2a2:	0e 94 89 00 	call	0x112	; 0x112 <display_rst>
	PORTC = 0b00000010;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	88 b9       	out	0x08, r24	; 8
	numCall(d2);
 2aa:	80 91 08 01 	lds	r24, 0x0108
 2ae:	90 91 09 01 	lds	r25, 0x0109
 2b2:	0e 94 06 01 	call	0x20c	; 0x20c <numCall>
	display_rst();
 2b6:	0e 94 89 00 	call	0x112	; 0x112 <display_rst>
	PORTC = 0b00000100;
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	88 b9       	out	0x08, r24	; 8
	colon();
 2be:	0e 94 84 00 	call	0x108	; 0x108 <colon>
	display_rst();
 2c2:	0e 94 89 00 	call	0x112	; 0x112 <display_rst>
	PORTC = 0b00001000;
 2c6:	88 e0       	ldi	r24, 0x08	; 8
 2c8:	88 b9       	out	0x08, r24	; 8
	numCall(d3);
 2ca:	80 91 0e 01 	lds	r24, 0x010E
 2ce:	90 91 0f 01 	lds	r25, 0x010F
 2d2:	0e 94 06 01 	call	0x20c	; 0x20c <numCall>
	display_rst();
 2d6:	0e 94 89 00 	call	0x112	; 0x112 <display_rst>
	PORTC = 0b00010000;
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	88 b9       	out	0x08, r24	; 8
	numCall(d4);
 2de:	80 91 0c 01 	lds	r24, 0x010C
 2e2:	90 91 0d 01 	lds	r25, 0x010D
 2e6:	0e 94 06 01 	call	0x20c	; 0x20c <numCall>
 2ea:	08 95       	ret

000002ec <DisInit>:
	}

}
void DisInit(void)
{
	DDRB = 0b00111111;
 2ec:	8f e3       	ldi	r24, 0x3F	; 63
 2ee:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00011111;
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11000000;
 2f4:	80 ec       	ldi	r24, 0xC0	; 192
 2f6:	8a b9       	out	0x0a, r24	; 10
	display_rst();
 2f8:	0e 94 89 00 	call	0x112	; 0x112 <display_rst>
 2fc:	08 95       	ret

000002fe <buttPress>:
}
//[--------BUTTON FUNCTIONS--------]
	int pressed;
void buttPress(void)
{
	pressed = 0;
 2fe:	10 92 0b 01 	sts	0x010B, r1
 302:	10 92 0a 01 	sts	0x010A, r1
	if(PIND & (1<<PD2))
 306:	4a 9b       	sbis	0x09, 2	; 9
 308:	0f c0       	rjmp	.+30     	; 0x328 <buttPress+0x2a>
	{
		time[0] = time[0] + 1;
 30a:	e0 e0       	ldi	r30, 0x00	; 0
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	80 81       	ld	r24, Z
 310:	91 81       	ldd	r25, Z+1	; 0x01
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	80 83       	st	Z, r24
		pressed = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 0b 01 	sts	0x010B, r25
 320:	80 93 0a 01 	sts	0x010A, r24
		set7();
 324:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
	}
	else
	{
//		pressed = 0;
	}
	if(PIND & (1<<PD3))
 328:	4b 9b       	sbis	0x09, 3	; 9
 32a:	0f c0       	rjmp	.+30     	; 0x34a <buttPress+0x4c>
	{
		time[1] = time[1] + 1;
 32c:	e2 e0       	ldi	r30, 0x02	; 2
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	80 81       	ld	r24, Z
 332:	91 81       	ldd	r25, Z+1	; 0x01
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	91 83       	std	Z+1, r25	; 0x01
 338:	80 83       	st	Z, r24
		pressed = 1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	90 93 0b 01 	sts	0x010B, r25
 342:	80 93 0a 01 	sts	0x010A, r24
		set7();
 346:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
	}
	else
	{
//		pressed = 0;
	}
	if(time[1] > 59)//60 minutes
 34a:	80 91 02 01 	lds	r24, 0x0102
 34e:	90 91 03 01 	lds	r25, 0x0103
 352:	cc 97       	sbiw	r24, 0x3c	; 60
 354:	34 f0       	brlt	.+12     	; 0x362 <buttPress+0x64>
	{
		time[1] = 0;
 356:	10 92 03 01 	sts	0x0103, r1
 35a:	10 92 02 01 	sts	0x0102, r1
	//	time[0] = time[0] + 1; //add hour
		set7();
 35e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
	}
	if(time[0] > 12)
 362:	80 91 00 01 	lds	r24, 0x0100
 366:	90 91 01 01 	lds	r25, 0x0101
 36a:	0d 97       	sbiw	r24, 0x0d	; 13
 36c:	44 f0       	brlt	.+16     	; 0x37e <buttPress+0x80>
	{
		time[0] = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 01 01 	sts	0x0101, r25
 376:	80 93 00 01 	sts	0x0100, r24
		set7();
 37a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
 37e:	08 95       	ret

00000380 <RTCInit>:
//|--------CLOCK FUNCTIONS-------|
//Timer2 init according datasheet
void RTCInit(void)
{
	//Disable timer2 interrupts
	TIMSK2  = 0;
 380:	10 92 70 00 	sts	0x0070, r1
	//Enable asynchronous mode
	ASSR  = (1<<AS2);
 384:	80 e2       	ldi	r24, 0x20	; 32
 386:	80 93 b6 00 	sts	0x00B6, r24
	//set initial counter value
	TCNT2=0;
 38a:	10 92 b2 00 	sts	0x00B2, r1
	//set prescaller 128
	TCCR2B |= (1<<CS22)|(1<<CS00);
 38e:	e1 eb       	ldi	r30, 0xB1	; 177
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	85 60       	ori	r24, 0x05	; 5
 396:	80 83       	st	Z, r24
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
 398:	e6 eb       	ldi	r30, 0xB6	; 182
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	81 71       	andi	r24, 0x11	; 17
 3a0:	e9 f7       	brne	.-6      	; 0x39c <RTCInit+0x1c>
	//clear interrupt flags
	TIFR2  = (1<<TOV2);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	87 bb       	out	0x17, r24	; 23
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
 3a6:	80 93 70 00 	sts	0x0070, r24
 3aa:	08 95       	ret

000003ac <count>:
}
//Overflow ISR
void count(void)
{
	time[2] = time[2] + 1; // count seconds
 3ac:	80 91 04 01 	lds	r24, 0x0104
 3b0:	90 91 05 01 	lds	r25, 0x0105
 3b4:	01 96       	adiw	r24, 0x01	; 1
	if(time[2] > 59) //when 60 set back to 0
 3b6:	8c 33       	cpi	r24, 0x3C	; 60
 3b8:	91 05       	cpc	r25, r1
 3ba:	2c f4       	brge	.+10     	; 0x3c6 <count+0x1a>
	TIMSK2  = (1<<TOIE2);
}
//Overflow ISR
void count(void)
{
	time[2] = time[2] + 1; // count seconds
 3bc:	90 93 05 01 	sts	0x0105, r25
 3c0:	80 93 04 01 	sts	0x0104, r24
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <count+0x34>
	if(time[2] > 59) //when 60 set back to 0
	{	
		//resets clock
		time[2] = 0;
 3c6:	10 92 05 01 	sts	0x0105, r1
 3ca:	10 92 04 01 	sts	0x0104, r1
		time[1] = time[1] + 1; //+1 minute
 3ce:	e2 e0       	ldi	r30, 0x02	; 2
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	80 81       	ld	r24, Z
 3d4:	91 81       	ldd	r25, Z+1	; 0x01
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	91 83       	std	Z+1, r25	; 0x01
 3da:	80 83       	st	Z, r24
		set7();
 3dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
	}
	if(time[1] > 59)//60 minutes
 3e0:	80 91 02 01 	lds	r24, 0x0102
 3e4:	90 91 03 01 	lds	r25, 0x0103
 3e8:	cc 97       	sbiw	r24, 0x3c	; 60
 3ea:	6c f0       	brlt	.+26     	; 0x406 <count+0x5a>
	{
		time[1] = 0;
 3ec:	10 92 03 01 	sts	0x0103, r1
 3f0:	10 92 02 01 	sts	0x0102, r1
		time[0] = time[0] + 1; //add hour
 3f4:	e0 e0       	ldi	r30, 0x00	; 0
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	91 83       	std	Z+1, r25	; 0x01
 400:	80 83       	st	Z, r24
		set7();
 402:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
	}
	if(time[0] > 12)
 406:	80 91 00 01 	lds	r24, 0x0100
 40a:	90 91 01 01 	lds	r25, 0x0101
 40e:	0d 97       	sbiw	r24, 0x0d	; 13
 410:	44 f0       	brlt	.+16     	; 0x422 <count+0x76>
	{
		time[0] = 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	90 93 01 01 	sts	0x0101, r25
 41a:	80 93 00 01 	sts	0x0100, r24
		set7();
 41e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
 422:	08 95       	ret

00000424 <__vector_9>:
	}

}
ISR(TIMER2_OVF_vect)
{	
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
	count();
 446:	0e 94 d6 01 	call	0x3ac	; 0x3ac <count>
	asm volatile("nop"::);
 44a:	00 00       	nop
	//_delay_us(10);
;

}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <main>:

//<------MAIN------->
int main (void)
{
	DisInit();
 46e:	0e 94 76 01 	call	0x2ec	; 0x2ec <DisInit>
	
	SMCR|=(1<<SM1)|(1<<SM0);
 472:	83 b7       	in	r24, 0x33	; 51
 474:	86 60       	ori	r24, 0x06	; 6
 476:	83 bf       	out	0x33, r24	; 51
	//Initialize port
//	PortInit();
	//Initialize the timer2
	RTCInit();
 478:	0e 94 c0 01 	call	0x380	; 0x380 <RTCInit>
	//Enable global interrupts
	sei();
 47c:	78 94       	sei
	set7();
 47e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set7>
	int fast;
	while(1)
	{
		if (pressed = 1)
 482:	01 e0       	ldi	r16, 0x01	; 1
 484:	10 e0       	ldi	r17, 0x00	; 0

		if(fast > 300)
		{

			buttPress();
			fast = 0;		
 486:	e1 2c       	mov	r14, r1
 488:	f1 2c       	mov	r15, r1
	sei();
	set7();
	int fast;
	while(1)
	{
		if (pressed = 1)
 48a:	10 93 0b 01 	sts	0x010B, r17
 48e:	00 93 0a 01 	sts	0x010A, r16
		{
		fast++;			
 492:	21 96       	adiw	r28, 0x01	; 1
		}

		if(fast > 300)
 494:	cd 32       	cpi	r28, 0x2D	; 45
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	d8 07       	cpc	r29, r24
 49a:	24 f0       	brlt	.+8      	; 0x4a4 <main+0x36>
		{

			buttPress();
 49c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <buttPress>
			fast = 0;		
 4a0:	ce 2d       	mov	r28, r14
 4a2:	df 2d       	mov	r29, r15
		
		//SMCR|=(1<<SE);
		//asm volatile("sleep"::);
	//	SMCR&=~(1<<SE);
		//Do nothing
		display();
 4a4:	0e 94 45 01 	call	0x28a	; 0x28a <display>
/*		if(pressed = 1)
		{
			delay(10);
		}*/

	}
 4a8:	f0 cf       	rjmp	.-32     	; 0x48a <main+0x1c>

000004aa <__divmodhi4>:
 4aa:	97 fb       	bst	r25, 7
 4ac:	07 2e       	mov	r0, r23
 4ae:	16 f4       	brtc	.+4      	; 0x4b4 <__divmodhi4+0xa>
 4b0:	00 94       	com	r0
 4b2:	07 d0       	rcall	.+14     	; 0x4c2 <__divmodhi4_neg1>
 4b4:	77 fd       	sbrc	r23, 7
 4b6:	09 d0       	rcall	.+18     	; 0x4ca <__divmodhi4_neg2>
 4b8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__udivmodhi4>
 4bc:	07 fc       	sbrc	r0, 7
 4be:	05 d0       	rcall	.+10     	; 0x4ca <__divmodhi4_neg2>
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__divmodhi4_exit>

000004c2 <__divmodhi4_neg1>:
 4c2:	90 95       	com	r25
 4c4:	81 95       	neg	r24
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	08 95       	ret

000004ca <__divmodhi4_neg2>:
 4ca:	70 95       	com	r23
 4cc:	61 95       	neg	r22
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255

000004d0 <__divmodhi4_exit>:
 4d0:	08 95       	ret

000004d2 <__udivmodhi4>:
 4d2:	aa 1b       	sub	r26, r26
 4d4:	bb 1b       	sub	r27, r27
 4d6:	51 e1       	ldi	r21, 0x11	; 17
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <__udivmodhi4_ep>

000004da <__udivmodhi4_loop>:
 4da:	aa 1f       	adc	r26, r26
 4dc:	bb 1f       	adc	r27, r27
 4de:	a6 17       	cp	r26, r22
 4e0:	b7 07       	cpc	r27, r23
 4e2:	10 f0       	brcs	.+4      	; 0x4e8 <__udivmodhi4_ep>
 4e4:	a6 1b       	sub	r26, r22
 4e6:	b7 0b       	sbc	r27, r23

000004e8 <__udivmodhi4_ep>:
 4e8:	88 1f       	adc	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	5a 95       	dec	r21
 4ee:	a9 f7       	brne	.-22     	; 0x4da <__udivmodhi4_loop>
 4f0:	80 95       	com	r24
 4f2:	90 95       	com	r25
 4f4:	bc 01       	movw	r22, r24
 4f6:	cd 01       	movw	r24, r26
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
