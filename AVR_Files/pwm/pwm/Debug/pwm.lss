
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000175  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000120  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014d  00000000  00000000  00000407  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017e  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000073  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwmAllPins>:

#define LED_DELAY  20                                  /* microseconds */

void pwmAllPins(uint8_t brightness) {
	uint8_t i;
	LED_PORT = 0xff;                                          /* turn on */
  80:	9f ef       	ldi	r25, 0xFF	; 255
  82:	95 b9       	out	0x05, r25	; 5
	for (i = 0; i < 255; i++) {
  84:	90 e0       	ldi	r25, 0x00	; 0
		if (i >= brightness) {            /* once it's been on long enough */
  86:	98 17       	cp	r25, r24
  88:	08 f0       	brcs	.+2      	; 0x8c <pwmAllPins+0xc>
			LED_PORT = 0;                                        /* turn off */
  8a:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	26 e0       	ldi	r18, 0x06	; 6
  8e:	2a 95       	dec	r18
  90:	f1 f7       	brne	.-4      	; 0x8e <pwmAllPins+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <pwmAllPins+0x14>
#define LED_DELAY  20                                  /* microseconds */

void pwmAllPins(uint8_t brightness) {
	uint8_t i;
	LED_PORT = 0xff;                                          /* turn on */
	for (i = 0; i < 255; i++) {
  94:	9f 5f       	subi	r25, 0xFF	; 255
  96:	9f 3f       	cpi	r25, 0xFF	; 255
  98:	b1 f7       	brne	.-20     	; 0x86 <pwmAllPins+0x6>
		if (i >= brightness) {            /* once it's been on long enough */
			LED_PORT = 0;                                        /* turn off */
		}
		_delay_us(LED_DELAY);
	}
}
  9a:	08 95       	ret

0000009c <main>:
	int8_t direction = 1;

	// -------- Inits --------- //

	// Init all LEDs
	LED_DDR = 0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	84 b9       	out	0x04, r24	; 4
	}
}

int main(void) {

	uint8_t brightness = 0;
  a0:	c0 e0       	ldi	r28, 0x00	; 0
	LED_DDR = 0xff;
	// ------ Event loop ------ //
	while (1) {
		// Brighten and dim
		if (brightness == 0) {
			direction = 1;
  a2:	d1 e0       	ldi	r29, 0x01	; 1
  a4:	11 e0       	ldi	r17, 0x01	; 1
		}
		if (brightness == 255) {
			direction = -1;
  a6:	0f ef       	ldi	r16, 0xFF	; 255
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <main+0x18>
	while (1) {
		// Brighten and dim
		if (brightness == 0) {
			direction = 1;
		}
		if (brightness == 255) {
  aa:	cf 3f       	cpi	r28, 0xFF	; 255
  ac:	19 f4       	brne	.+6      	; 0xb4 <main+0x18>
			direction = -1;
  ae:	d0 2f       	mov	r29, r16
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0x18>
	LED_DDR = 0xff;
	// ------ Event loop ------ //
	while (1) {
		// Brighten and dim
		if (brightness == 0) {
			direction = 1;
  b2:	d1 2f       	mov	r29, r17
		}
		if (brightness == 255) {
			direction = -1;
		}
		brightness += direction;
  b4:	cd 0f       	add	r28, r29
		pwmAllPins(brightness);
  b6:	8c 2f       	mov	r24, r28
  b8:	0e 94 40 00 	call	0x80	; 0x80 <pwmAllPins>
	// Init all LEDs
	LED_DDR = 0xff;
	// ------ Event loop ------ //
	while (1) {
		// Brighten and dim
		if (brightness == 0) {
  bc:	cc 23       	and	r28, r28
  be:	c9 f3       	breq	.-14     	; 0xb2 <main+0x16>
  c0:	f4 cf       	rjmp	.-24     	; 0xaa <main+0xe>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
