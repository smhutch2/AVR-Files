
Menorah_t2313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000119  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d1  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013c  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000189  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000005f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	23 c0       	rjmp	.+70     	; 0x7c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
	int count = 0;
	DDRB = 0xff;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
#include <util/delay.h>


int main(void)
{
	int count = 0;
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0

		}
		if(count > 7)
		{
			count = 0;
			PORTB =0b00000001;
  40:	f1 e0       	ldi	r31, 0x01	; 1
			count++;

		}
		if(count > 7)
		{
			count = 0;
  42:	e0 e0       	ldi	r30, 0x00	; 0
  44:	70 e0       	ldi	r23, 0x00	; 0
			PORTB =0b00000001;
		}
        PORTB |= (1<<count);
  46:	41 e0       	ldi	r20, 0x01	; 1
  48:	50 e0       	ldi	r21, 0x00	; 0
	int count = 0;
	DDRB = 0xff;
    while(1)
    {

		if (PIND & (1<<PD2))
  4a:	82 99       	sbic	0x10, 2	; 16
		{
			count++;
  4c:	01 96       	adiw	r24, 0x01	; 1

		}
		if(count > 7)
  4e:	88 30       	cpi	r24, 0x08	; 8
  50:	91 05       	cpc	r25, r1
  52:	1c f0       	brlt	.+6      	; 0x5a <__SREG__+0x1b>
		{
			count = 0;
			PORTB =0b00000001;
  54:	f8 bb       	out	0x18, r31	; 24
			count++;

		}
		if(count > 7)
		{
			count = 0;
  56:	8e 2f       	mov	r24, r30
  58:	97 2f       	mov	r25, r23
			PORTB =0b00000001;
		}
        PORTB |= (1<<count);
  5a:	68 b3       	in	r22, 0x18	; 24
  5c:	9a 01       	movw	r18, r20
  5e:	08 2e       	mov	r0, r24
  60:	02 c0       	rjmp	.+4      	; 0x66 <__SREG__+0x27>
  62:	22 0f       	add	r18, r18
  64:	33 1f       	adc	r19, r19
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <__SREG__+0x23>
  6a:	26 2b       	or	r18, r22
  6c:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	a7 ea       	ldi	r26, 0xA7	; 167
  70:	b1 e6       	ldi	r27, 0x61	; 97
  72:	11 97       	sbiw	r26, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
  76:	00 c0       	rjmp	.+0      	; 0x78 <__SREG__+0x39>
  78:	00 00       	nop
  7a:	e7 cf       	rjmp	.-50     	; 0x4a <__SREG__+0xb>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
