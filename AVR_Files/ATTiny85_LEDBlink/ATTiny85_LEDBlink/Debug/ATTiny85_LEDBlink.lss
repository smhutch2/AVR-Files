
ATTiny85_LEDBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000058  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ac  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000108  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000139  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000186  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <util/delay.h>

int main (void)
{

	DDRB = 0b001100;
  30:	8c e0       	ldi	r24, 0x0C	; 12
  32:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b010000;
  34:	80 e1       	ldi	r24, 0x10	; 16
  36:	88 bb       	out	0x18, r24	; 24
		/* Define pull-ups and set outputs high */
		/* Define directions for port pins */
	
		if(PINB == 0b010000)
		{
			PORTB = 0b001100;		
  38:	9c e0       	ldi	r25, 0x0C	; 12
	while(1)
	{
		/* Define pull-ups and set outputs high */
		/* Define directions for port pins */
	
		if(PINB == 0b010000)
  3a:	86 b3       	in	r24, 0x16	; 22
  3c:	80 31       	cpi	r24, 0x10	; 16
  3e:	11 f4       	brne	.+4      	; 0x44 <__SREG__+0x5>
		{
			PORTB = 0b001100;		
  40:	98 bb       	out	0x18, r25	; 24
  42:	01 c0       	rjmp	.+2      	; 0x46 <__SREG__+0x7>
		}
		else
		{
			PORTB = 0b000000;
  44:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	e3 ec       	ldi	r30, 0xC3	; 195
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	31 97       	sbiw	r30, 0x01	; 1
  4c:	f1 f7       	brne	.-4      	; 0x4a <__SREG__+0xb>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <__SREG__+0x11>
  50:	00 00       	nop
  52:	f3 cf       	rjmp	.-26     	; 0x3a <main+0xa>

00000054 <_exit>:
  54:	f8 94       	cli

00000056 <__stop_program>:
  56:	ff cf       	rjmp	.-2      	; 0x56 <__stop_program>
