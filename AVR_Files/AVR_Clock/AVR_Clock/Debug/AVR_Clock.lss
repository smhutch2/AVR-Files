
AVR_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  0000020e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000144  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e7  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000011c  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000155  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cb  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PortInit>:
int time[3] = {0,0,0}; // hour,minute,second
//Prepare LED pin
void PortInit(void)
{
	//Initially LED OFF
	PORTB&=~(1<<PB0);
  90:	28 98       	cbi	0x05, 0	; 5
	//PD0 as output
	DDRB|=(1<<PB0)|(1<<PB5);
  92:	84 b1       	in	r24, 0x04	; 4
  94:	81 62       	ori	r24, 0x21	; 33
  96:	84 b9       	out	0x04, r24	; 4
  98:	08 95       	ret

0000009a <RTCInit>:
}
//Timer2 init according datasheet
void RTCInit(void)
{
	//Disable timer2 interrupts
	TIMSK2  = 0;
  9a:	10 92 70 00 	sts	0x0070, r1
	//Enable asynchronous mode
	ASSR  = (1<<AS2);
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	80 93 b6 00 	sts	0x00B6, r24
	//set initial counter value
	TCNT2=0;
  a4:	10 92 b2 00 	sts	0x00B2, r1
	//set prescaller 128
	TCCR2B |= (1<<CS22)|(1<<CS00);
  a8:	e1 eb       	ldi	r30, 0xB1	; 177
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	85 60       	ori	r24, 0x05	; 5
  b0:	80 83       	st	Z, r24
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
  b2:	e6 eb       	ldi	r30, 0xB6	; 182
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 71       	andi	r24, 0x11	; 17
  ba:	e9 f7       	brne	.-6      	; 0xb6 <RTCInit+0x1c>
	//clear interrupt flags
	TIFR2  = (1<<TOV2);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	87 bb       	out	0x17, r24	; 23
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
  c0:	80 93 70 00 	sts	0x0070, r24
  c4:	08 95       	ret

000000c6 <count>:
	//_delay_us(10);
	count();
}
int count(void)
{
	time[2] = time[2] + 1; // count seconds
  c6:	e4 e0       	ldi	r30, 0x04	; 4
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	80 81       	ld	r24, Z
  cc:	91 81       	ldd	r25, Z+1	; 0x01
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	91 83       	std	Z+1, r25	; 0x01
  d2:	80 83       	st	Z, r24
	if(time[2] > 59) //when 60 set back to 0
  d4:	cc 97       	sbiw	r24, 0x3c	; 60
  d6:	64 f0       	brlt	.+24     	; 0xf0 <count+0x2a>
	{
		PORTB |= (1<<PB5);
  d8:	2d 9a       	sbi	0x05, 5	; 5
		time[2] = 0;
  da:	10 92 05 01 	sts	0x0105, r1
  de:	10 92 04 01 	sts	0x0104, r1
		time[1] = time[1] + 1; //+1 minute
  e2:	e2 e0       	ldi	r30, 0x02	; 2
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	80 81       	ld	r24, Z
  e8:	91 81       	ldd	r25, Z+1	; 0x01
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	91 83       	std	Z+1, r25	; 0x01
  ee:	80 83       	st	Z, r24
	}
	if(time[1] > 59)//60 minutes
  f0:	80 91 02 01 	lds	r24, 0x0102
  f4:	90 91 03 01 	lds	r25, 0x0103
  f8:	cc 97       	sbiw	r24, 0x3c	; 60
  fa:	5c f0       	brlt	.+22     	; 0x112 <count+0x4c>
	{
		time[1] = 0;
  fc:	10 92 03 01 	sts	0x0103, r1
 100:	10 92 02 01 	sts	0x0102, r1
		time[0] = time[0] + 1; //add hour
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
	}
	if(time[0] > 12)
 112:	80 91 00 01 	lds	r24, 0x0100
 116:	90 91 01 01 	lds	r25, 0x0101
 11a:	0d 97       	sbiw	r24, 0x0d	; 13
 11c:	24 f0       	brlt	.+8      	; 0x126 <count+0x60>
	{
		time[0] = 0;
 11e:	10 92 01 01 	sts	0x0101, r1
 122:	10 92 00 01 	sts	0x0100, r1
	}

}	
 126:	08 95       	ret

00000128 <__vector_9>:
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
}
//Overflow ISR
ISR(TIMER2_OVF_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	//Toggle pin PD0 every second
	PINB=(1<<PB0);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	83 b9       	out	0x03, r24	; 3
	asm volatile("nop"::);
 14e:	00 00       	nop
	//_delay_us(10);
	count();
 150:	0e 94 63 00 	call	0xc6	; 0xc6 <count>
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:
	}

}	
int main (void)
{
	SMCR|=(1<<SM1)|(1<<SM0);
 176:	83 b7       	in	r24, 0x33	; 51
 178:	86 60       	ori	r24, 0x06	; 6
 17a:	83 bf       	out	0x33, r24	; 51
	//Initialize port
	PortInit();
 17c:	0e 94 48 00 	call	0x90	; 0x90 <PortInit>
	//Initialize the timer2
	RTCInit();
 180:	0e 94 4d 00 	call	0x9a	; 0x9a <RTCInit>
	//Enable global interrupts
	sei();
 184:	78 94       	sei
	while(1)
	{
		SMCR|=(1<<SE);
 186:	83 b7       	in	r24, 0x33	; 51
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	83 bf       	out	0x33, r24	; 51
		asm volatile("sleep"::);
 18c:	88 95       	sleep
		SMCR&=~(1<<SE);
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	83 bf       	out	0x33, r24	; 51
 194:	f8 cf       	rjmp	.-16     	; 0x186 <main+0x10>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
