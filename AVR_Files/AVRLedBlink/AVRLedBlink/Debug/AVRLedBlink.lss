
AVRLedBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000146  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fc  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013c  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000181  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005c  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/uart.h>

int main (void)
{
	// set all pins on PORTB for output
	DDRB = 0b00100001;
  80:	81 e2       	ldi	r24, 0x21	; 33
  82:	84 b9       	out	0x04, r24	; 4
//	uint16_t baudrate = 0x2580;
//	uart_init(baudrate);
	int count = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
			on = 0;
			PORTB &= ~(1<<PB0); // &= 
		}
		if(count >= wait && on == 1)
		{
			count = 0;
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	20 e0       	ldi	r18, 0x00	; 0
//		uint8_t dat = 0b00010000;
//		uart_putc(dat);
		unsigned int val = PINB;
		int on;
		
		if (val & (1<<PB1))    // see comment #2
  8c:	19 9b       	sbis	0x03, 1	; 3
  8e:	06 c0       	rjmp	.+12     	; 0x9c <main+0x1c>
		{
			on = 1;
			PORTB |= (1<<PB0);  // |= adds without resetting PORTB
  90:	28 9a       	sbi	0x05, 0	; 5
			count++;	
  92:	01 96       	adiw	r24, 0x01	; 1
		else
		{
			on = 0;
			PORTB &= ~(1<<PB0); // &= 
		}
		if(count >= wait && on == 1)
  94:	82 33       	cpi	r24, 0x32	; 50
  96:	91 05       	cpc	r25, r1
  98:	24 f4       	brge	.+8      	; 0xa2 <main+0x22>
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <main+0x28>
			count++;	
		}
		else
		{
			on = 0;
			PORTB &= ~(1<<PB0); // &= 
  9c:	28 98       	cbi	0x05, 0	; 5
			count = 0;
			PORTB |= (1<<PB5);
		}
		if (on == 0)
		{
			PORTB &= ~(1<<PB5);				
  9e:	2d 98       	cbi	0x05, 5	; 5
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <main+0x28>
			PORTB &= ~(1<<PB0); // &= 
		}
		if(count >= wait && on == 1)
		{
			count = 0;
			PORTB |= (1<<PB5);
  a2:	2d 9a       	sbi	0x05, 5	; 5
			on = 0;
			PORTB &= ~(1<<PB0); // &= 
		}
		if(count >= wait && on == 1)
		{
			count = 0;
  a4:	83 2f       	mov	r24, r19
  a6:	92 2f       	mov	r25, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e3 ec       	ldi	r30, 0xC3	; 195
  aa:	f9 e0       	ldi	r31, 0x09	; 9
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x2c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
  b4:	eb cf       	rjmp	.-42     	; 0x8c <main+0xc>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
