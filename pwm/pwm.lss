
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001bd  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f9  00000000  00000000  00000321  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000156  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fe  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwmAllPins>:
#include <util/delay.h>                     /* Functions to waste time */
#include "pinDefines.h"

#define LED_DELAY  20                                  /* microseconds */

void pwmAllPins(uint8_t brightness) {
  80:	28 2f       	mov	r18, r24
  uint8_t i;
  LED_PORT = 0xff;                                          /* turn on */
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	85 b9       	out	0x05, r24	; 5
  86:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  88:	36 e0       	ldi	r19, 0x06	; 6
  for (i = 0; i < 255; i++) {
    if (i >= brightness) {            /* once it's been on long enough */
  8a:	92 17       	cp	r25, r18
  8c:	08 f0       	brcs	.+2      	; 0x90 <pwmAllPins+0x10>
      LED_PORT = 0;                                        /* turn off */
  8e:	15 b8       	out	0x05, r1	; 5
  90:	83 2f       	mov	r24, r19
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <pwmAllPins+0x12>
#define LED_DELAY  20                                  /* microseconds */

void pwmAllPins(uint8_t brightness) {
  uint8_t i;
  LED_PORT = 0xff;                                          /* turn on */
  for (i = 0; i < 255; i++) {
  96:	9f 5f       	subi	r25, 0xFF	; 255
  98:	9f 3f       	cpi	r25, 0xFF	; 255
  9a:	b9 f7       	brne	.-18     	; 0x8a <pwmAllPins+0xa>
    if (i >= brightness) {            /* once it's been on long enough */
      LED_PORT = 0;                                        /* turn off */
    }
    _delay_us(LED_DELAY);
  }
}
  9c:	08 95       	ret

0000009e <main>:

int main(void) {
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  int8_t direction = 1;

  // -------- Inits --------- //

  // Init all LEDs
  LED_DDR = 0xff;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	01 e0       	ldi	r16, 0x01	; 1
  // ------ Event loop ------ //
  while (1) {
    // Brighten and dim
    if (brightness == 0) {
  aa:	11 23       	and	r17, r17
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x14>
  ae:	01 e0       	ldi	r16, 0x01	; 1
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <main+0x1a>
      direction = 1;
    }
    if (brightness == 255) {
  b2:	1f 3f       	cpi	r17, 0xFF	; 255
  b4:	09 f4       	brne	.+2      	; 0xb8 <main+0x1a>
  b6:	0f ef       	ldi	r16, 0xFF	; 255
      direction = -1;
    }
    brightness += direction;
  b8:	10 0f       	add	r17, r16
    pwmAllPins(brightness);
  ba:	81 2f       	mov	r24, r17
  bc:	0e 94 40 00 	call	0x80	; 0x80 <pwmAllPins>
  c0:	f4 cf       	rjmp	.-24     	; 0xaa <main+0xc>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
